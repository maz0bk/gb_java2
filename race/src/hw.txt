public class MainClass {
    public static final int CARS_COUNT = 4;
    private static volatile Car winner;
    private static CyclicBarrier cbBeforeStart = new CyclicBarrier(CARS_COUNT+1);
    private static CyclicBarrier cbAfterStart = new CyclicBarrier(CARS_COUNT+1);
    private static CyclicBarrier cbBeforeEnd = new CyclicBarrier(CARS_COUNT+1);

    public static void main(String[] args) {
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Подготовка!!!");
        Race race = new Race(new Road(60), new Tunnel(), new Road(40));

        Car[] cars = new Car[CARS_COUNT];
        for (int i = 0; i < cars.length; i++) {
            cars[i] = new Car(race, 20 + (int) (Math.random() * 10));
        }
        for (int i = 0; i < cars.length; i++) {
            new Thread(cars[i]).start();
        }

       cbBeforeStartAwait();
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка началась!!!");
        cbAfterStartAwait();

        cbBeforeEndAwait();
        System.out.println("ВАЖНОЕ ОБЪЯВЛЕНИЕ >>> Гонка закончилась!!!");
        System.out.println("Победитель: "+ winner.getName());
    }

    public  static void cbBeforeStartAwait(){
        try {
            cbBeforeStart.await();
        } catch (InterruptedException |BrokenBarrierException e) {
            e.printStackTrace();
        }
    }
    public  static void cbAfterStartAwait(){
        try {
            cbAfterStart.await();
        } catch (InterruptedException |BrokenBarrierException e) {
            e.printStackTrace();
        }
    }
    public  static void cbBeforeEndAwait(){
        try {
            cbBeforeEnd.await();
        } catch (InterruptedException |BrokenBarrierException e) {
            e.printStackTrace();
        }
    }
    public static synchronized boolean setWinner(Car car){
        if (winner == null) {
            winner = car;
        }
        return winner==car;

    }
}

public class Car implements Runnable {
    private static int CARS_COUNT;

    static {
        CARS_COUNT = 0;
    }
    private Race race;
    private int speed;
    private String name;

    public String getName() {
        return name;
    }
    public int getSpeed() {
        return speed;
    }
    public Car(Race race, int speed) {
        this.race = race;
        this.speed = speed;
        CARS_COUNT++;
        this.name = "Участник #" + CARS_COUNT;
    }
    @Override
    public void run() {
        try {
            System.out.println(this.name + " готовится");
            Thread.sleep(500 + (int)(Math.random() * 800));
            System.out.println(this.name + " готов");
        } catch (Exception e) {
            e.printStackTrace();
        }

        MainClass.cbBeforeStartAwait();
        MainClass.cbAfterStartAwait();
        for (int i = 0; i < race.getStages().size(); i++) {
            race.getStages().get(i).go(this);
        }
        if(MainClass.setWinner(this)){
            System.out.println("ПОБЕДА!!! "+ name);
        }
        MainClass.cbBeforeEndAwait();
    }

}

public class Tunnel extends Stage {
    Semaphore smp;
    public Tunnel() {
        this.length = 80;
        this.description = "Тоннель " + length + " метров";
        smp = new Semaphore(MainClass.CARS_COUNT /2);
    }
    @Override
    public void go(Car c) {
        try {
            try {
                System.out.println(c.getName() + " готовится к этапу(ждет): " + description);
                smp.acquire();
                System.out.println(c.getName() + " начал этап: " + description);
                Thread.sleep(length / c.getSpeed() * 1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            } finally {
                System.out.println(c.getName() + " закончил этап: " + description);
                smp.release();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

